apply plugin: 'idea'
apply from:   'http://evgenyg.artifactoryonline.com/evgenyg/libs-releases-local/wrapper.gradle'


buildscript {

    final version = project.hasProperty( 'pluginsVersion' ) ? project.pluginsVersion : '0.3.1-SNAPSHOT'
    println "> Running Node.js plugin version [$version]"

    repositories {
        maven { url 'http://jcenter.bintray.com' }
        maven { url 'http://evgenyg.artifactoryonline.com/evgenyg/plugins-snapshots-local/' }
        mavenLocal()
    }

    dependencies { classpath "com.github.goldin.plugins.gradle:node:$version" }
}

defaultTasks 'clean', 'cleanModules', 'start', 'restartall', 'stop', 'stopall'


idea.project {
    jdkName = '1.7'
    ipr.withXml { provider -> provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git' }
}


idea.module {

    downloadSources = true
    downloadJavadoc = false

    excludeDirs += file( 'build' )

    iml.withXml {
        provider ->
        provider.node.component.first().appendNode( 'orderEntry', [ type : 'library', name : 'Groovy', level: 'application' ])
        provider.node.component.first().appendNode( 'orderEntry', [ type : 'library', name : 'Gradle', level: 'application' ])
    }
}


int portNumberForProject( Project p ){ 3000 + ( Math.abs( p.name.hashCode()) % 100 ) }
void assertEqual( File f1, File f2 )
{
    assert ( f1.text == f2.text ), "[$f1.canonicalPath] != [$f2.canonicalPath]"
    logger.info( "[$f1.canonicalPath] = [$f2.canonicalPath]" )
}


subprojects {
    Project p ->
    apply plugin: 'node'


    group = 'com.github.goldin.plugins.gradle-plugins-node'    

    node {
        nodeVersion            = 'latest'
        port                   = portNumberForProject( p )
        cleanWorkspace         = true
        cleanWorkspaceCommands = [ 'git checkout -f config package.json' ]
        npmRemoteCache         = 'npm-deployer:{DESede}Bn/bNKNuYHfoEmSncMkHDYGQJjou798W@http://evgenyg.artifactoryonline.com/evgenyg/npm/'
        printConfigs           = true
        startupScript          = true
        checks                 = [ '/' : [ 200, '' ]]
    }

    setup.doFirst {
        node.npmInstallDevDependencies = p.gradle.taskGraph.hasTask( test )
        println "> devDependencies *are${ node.npmInstallDevDependencies ? '' : ' not' }* installed"
    }

    clean.doFirst {
        if ( System.getProperty( 'cleanNode' ) != null )
        {
            final deleteFiles = [
                new File( System.getProperty( 'user.home' ), '.nvm' ),
                new File( System.getProperty( 'user.home' ), '.npm' )
            ]

            if ( deleteFiles.any{ it.exists() })
            {
                println "Deleting $deleteFiles"
                project.delete( deleteFiles )
            }
        }
    }
}


configure ( subprojects.findAll{ it.name.startsWith( 'hello-' ) }) {
    Project p ->

    //noinspection GroovyMapGetCanBeKeyedAccess
    final checkContent = p.projectDir.name + [ 'hello-js/hello-js'                     : '|yhn|890|',
                                               'hello-js/hello-js-port-number'         : '|undefined|undefined|',
                                               'hello-js/hello-coffee-port-number'     : '|zaq|123|',
                                               'hello-js/hello-js-configs-new-keys'    : '|OLM|457|false|false',
                                               'hello-js/hello-js-configs-update-keys' : '|IMN|784|true|true' ].get( p.name )
    assert checkContent

    node.checks  = [ '/' : [ 200, checkContent ]]
    node.configs = [[ 'config/development.json' : file( "${ projectDir.name }.json" ) ],
                    [ 'config/development.json' : [ port : portNumberForProject( p ) ]]]
    setup << {
        /**
         * Comparing all configs generated with '*-merged.json' files expected.
         */
        final configFiles = new File( p.projectDir, 'config' ).listFiles().findAll{ File f ->   f.name.endsWith( '.json' ) }.
                                                                           findAll{ File f -> ! f.name.endsWith( '-merged.json' ) }
        for ( File configFile in configFiles )
        {
            final mergedFile = new File( configFile.parentFile, configFile.name[ 0 .. -6 ] + '-merged.json' )
            assertEqual( configFile, mergedFile )
        }
    }
}


project ( ':hello-js/hello-js'                  ) { node { configsNewKeys = 'fail'   }}
project ( ':hello-js/hello-js-port-number'      ) { node { configsNewKeys = 'ignore' }}
project ( ':hello-js/hello-coffee-port-number'  ) { node { configsNewKeys = 'create' }}

project ( ':hello-js/hello-js-configs-new-keys' ) {
    Project p ->

    node {
        configsNewKeys = 'create'
        configs        = [[ 'config/development.json'   : file( "${ projectDir.name }.json" ) ],
                          [ 'config/development.json'   : [ port : portNumberForProject( p ) ]],
                          [ 'config/development.json'   : file( "${ projectDir.name }-2.json" ) ],
                          [ 'config/development-2.json' : file( "${ projectDir.name }.properties" ) ]]
    }
}


project ( ':hello-js/hello-js-configs-update-keys' ) {
    Project p ->

    node {
        configsNewKeys = 'fail'
        configs        = [[ 'config/development.json'   : file( "${ projectDir.name }.json" ) ],
                          [ 'config/development.json'   : [ port : portNumberForProject( p ) ]],
                          [ 'config/development-2.json' : file( "${ projectDir.name }.properties" ) ],
                          [ 'config/development-3.json' : file( "${ projectDir.name }-3.json" ) ],
                          [ 'config/development-4.json' : file( "${ projectDir.name }-4.json" ) ],
                          [ 'config/development-5.json' : file( "${ projectDir.name }-5.json" ) ],
                          [ 'config/development-6.json' : file( "${ projectDir.name }-6.json" ) ],
                          [ 'config/development-7.json' : file( "${ projectDir.name }-7.json" ) ]]

        replaces       = [[ 'config/resource.txt' : [ 'a'     : 'b',
                                                      '/\\d/' : '!' ]]]
    }

    setup << { assertEqual( p.file( 'config/resource.txt' ), p.file( 'config/resource-replaced.txt' )) }
}


project ( ':run-commands' ){
    node.run = [ 'pwd', 'coffee --version', 'grunt -version', 'git log -1', 'less --version', 'ls -al' ]
}


project ( ':redis' ){
    node {
      redisPort = 27016
      env       = [ A : 1, B : 2 ]
      checks    = [ '/' : [ 200, '/\\Q[0]:[hashtest 1]\n[1]:[hashtest 2]\\E/' ]]
    }
}


project ( ':nirc' ){
    node.checks = [ '/' : [ 200, '<h1><i>n</i>irc</h1>' ]]
}


project ( ':nodejs-blackboard' ){
    Project p ->
    node {
        checks      = [ '/' : [ 200, '/<h\\d>nodejs experiment</h\\d><p>blackboard</p>/' ]]
        mongoDBPath = 'db'
        before      = [ "node ${ p.projectDir.canonicalPath }/add_data.js" ]
    }
}


project ( ':uptime' ){
    Project p ->
    node {
        checks       = [ '/'           : [ 200, 'Uptime*Latest events*' ],
                         '/api'        : [ 200, '[{ "method": "GET", "path": "/api/checks/count" }, { "method": "GET", "path": "/api/checks" }]'],
                         '/api/checks' : [ 200, '[]' ]]
        mongoPort    = 27018
        mongoDBPath  = 'db path with space'
        mongoLogpath = 'log path with space'
        testInput    = 'test/lib'
        replaces     = [[ 'config/default.yaml' : [ '${server.port}' : portNumberForProject( p ) ]]]
        npmInstallDevDependencies = true
    }
}
